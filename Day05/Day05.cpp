//#include "pch.h"
#include <iostream>
#include <vector>
#include <sstream>
#include <iostream>

using namespace std;

typedef vector<int> data_t;

enum class OpCode
{
	Add = 1,
	Mult = 2,
	Input = 3,
	Output = 4,
	JIT = 5,
	JIF = 6,
	Less = 7,
	Equals = 8,
	Halt = 99,
};

enum class Mode
{
	Position = 0,
	Immediate = 1,
};

class CPU
{
	uint32_t pc = 0;

public:

	int& GetValue(data_t& data, int pc, int paramIdx)
	{
		auto instr = data[pc++];
		for (int i = 0; i < paramIdx + 2; ++i)
		{
			instr /= 10;
		}

		switch ((Mode)(instr % 10))
		{
		case Mode::Position: return data.at(data[pc + paramIdx]);
			break;
		case Mode::Immediate: return data.at(pc + paramIdx);
			break;
		default:
			throw exception("Invalid mode");
			break;
		}
	}

	void Execute(data_t& data)
	{
		bool done = false;

		while (!done)
		{
			auto instr = data[pc];
			auto op = (OpCode)(instr % 100);
			auto param = [&](int p) -> decltype(auto) { return GetValue(data, pc, p); };
			switch (op)
			{
			case OpCode::Add:
			{
				param(2) = param(0) + param(1);
				pc += 4;
				break;
			}
			case OpCode::Mult:
			{
				param(2) = param(0) * param(1);
				pc += 4;
				break;
			}
			case OpCode::Input:
			{
				//int value;
				//cout << "Input:";
				//cin >> value;
				data[data[pc+1]] = 1;// value;
				pc += 2;
				break;
			}
			case OpCode::Output:
			{
				cout << "Output: " << param(0) << '\n';
				pc += 2;
				break;
			}
			case OpCode::Halt:
			{
				done = true;
				cout << "Done\n";
				break;
			}
			}
		}
	}
};

data_t Tokenize(const string& input)
{
	data_t result;
	istringstream tokenStream(input);
	string tokenStr;
	while (std::getline(tokenStream, tokenStr, ','))
	{
		result.push_back(stoi(tokenStr));
	}
	return result;
}

int main()
{
	//auto data = Tokenize("3,0,4,0,99");// ("1002,4,3,4,33");
	auto data = Tokenize("3,225,1,225,6,6,1100,1,238,225,104,0,1102,7,85,225,1102,67,12,225,102,36,65,224,1001,224,-3096,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1001,17,31,224,1001,224,-98,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,86,19,225,1101,5,27,225,1102,18,37,225,2,125,74,224,1001,224,-1406,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,13,47,225,1,99,14,224,1001,224,-98,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,1101,38,88,225,1102,91,36,224,101,-3276,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,59,76,224,1001,224,-135,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,101,90,195,224,1001,224,-112,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1102,22,28,225,1002,69,47,224,1001,224,-235,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,226,226,224,102,2,223,223,1006,224,329,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,344,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,359,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,374,101,1,223,223,1008,677,226,224,1002,223,2,223,1006,224,389,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,404,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,419,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,434,1001,223,1,223,8,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,464,101,1,223,223,1007,226,677,224,1002,223,2,223,1006,224,479,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,494,1001,223,1,223,1108,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,524,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,569,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,584,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,599,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,1107,226,677,224,102,2,223,223,1006,224,629,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,659,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226");
	//auto data = Tokenize("1,9,10,3,2,3,11,0,99,30,40,50");
	//auto data = Tokenize("1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,19,10,23,2,13,23,27,1,5,27,31,2,6,31,35,1,6,35,39,2,39,9,43,1,5,43,47,1,13,47,51,1,10,51,55,2,55,10,59,2,10,59,63,1,9,63,67,2,67,13,71,1,71,6,75,2,6,75,79,1,5,79,83,2,83,9,87,1,6,87,91,2,91,6,95,1,95,6,99,2,99,13,103,1,6,103,107,1,2,107,111,1,111,9,0,99,2,14,0,0");
	CPU cpu;
	cpu.Execute(data);
}